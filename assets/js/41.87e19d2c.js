(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{307:function(t,s,a){"use strict";a.r(s);var e=a(13),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("[toc]")]),t._v(" "),s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h2",{attrs:{id:"_1-正则表达式简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-正则表达式简介"}},[t._v("#")]),t._v(" 1. 正则表达式简介")]),t._v(" "),s("p",[t._v("正则表达式（Regular Expression）是一种文本模式，用于匹配字符串，要么"),s("strong",[t._v("匹配字符")]),t._v("，要么"),s("strong",[t._v("匹配位置")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_1-1-什么是位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是位置"}},[t._v("#")]),t._v(" 1.1. 什么是位置")]),t._v(" "),s("p",[t._v("位置不是字符，指的是两个相邻字符之间的空隙，可以理解为空字符 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[t._v("例如字符串 "),s("code",[t._v('"ab"')]),t._v(" 可以理解为 "),s("code",[t._v('"a" + "" + "b"')]),t._v("，"),s("code",[t._v("ab")]),t._v(" 之间就有位置 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[t._v("空字符没有数量的概念，一个空字符和 n 个空字符的意义是一样的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("又空字符可以看做是位置，所以字符之间可以有 n 个位置，例如 "),s("code",[t._v('"ab" = "a" + "" + "" + "b"')]),t._v("，也可看做是 "),s("code",[t._v("ab")]),t._v(" 之间的位置出现了 n 次。")]),t._v(" "),s("p",[t._v("反过来，多次匹配同一个位置，也可以看做是只匹配一次。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^^^[0-9]$$$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开头位置有三个，结尾位置有三个")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上匹配等同于下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开头位置有一个，结尾位置有一个")]),t._v("\n")])])]),s("h3",{attrs:{id:"_1-2-正则实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-正则实例"}},[t._v("#")]),t._v(" 1.2. 正则实例")]),t._v(" "),s("p",[t._v("和数组、对象一样，可以通过调用构造函数、字面量生成正则实例。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造实例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字面量")]),t._v("\n")])])]),s("p",[t._v("参数如下：")]),t._v(" "),s("ul",[s("li",[t._v("pattern"),s("br"),t._v("\n模式，表示想要匹配的模式，有自己的语法和字符。")]),t._v(" "),s("li",[t._v("flags"),s("br"),t._v("\n可选，作为匹配模式的修饰符。\n可以使用多个修饰符。")])]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-常见语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-常见语法"}},[t._v("#")]),t._v(" 1.2.1. 常见语法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("常见符号")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("量词")]),t._v(" "),s("td",[t._v("+、?、*、^、$、{X}、{X,}、{X,Y}")])]),t._v(" "),s("tr",[s("td",[t._v("修饰符")]),t._v(" "),s("td",[t._v("g、i、m")])]),t._v(" "),s("tr",[s("td",[t._v("元字符")]),t._v(" "),s("td",[t._v(".、\\s、\\S、\\b、\\B、\\d、\\D、\\w、\\W")])]),t._v(" "),s("tr",[s("td",[t._v("范围")]),t._v(" "),s("td",[t._v("[0-9]、[A-Z]、[a-z]、[abc]、[^abc]")])])])]),t._v(" "),s("p",[t._v("基础语法以记忆为主，不做赘述，如有遗忘，可在下面网站查询：")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.runoob.com/jsref/jsref-obj-regexp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript RegExp 对象"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("正因为有自己的符号语法，正则表达式中匹配诸如 "),s("code",[t._v("+")]),t._v(" 、"),s("code",[t._v("}")]),t._v(" 等特殊符号，都需要使用 "),s("code",[t._v("\\")]),t._v(" 进行转义，例如 "),s("code",[t._v("+")]),t._v(" 转为 "),s("code",[t._v("\\+")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-使用正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-使用正则表达式"}},[t._v("#")]),t._v(" 1.3. 使用正则表达式")]),t._v(" "),s("p",[t._v("任意和匹配相关的方法，都可以使用正则表达式作为匹配项，例如验证、查询、切分、提取、替换，第一步都是先匹配。")]),t._v(" "),s("p",[t._v("RegExp 和 String 实例的正则表达式使用场景如下：")]),t._v(" "),s("h4",{attrs:{id:"_1-3-1-regexp-实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-regexp-实例方法"}},[t._v("#")]),t._v(" 1.3.1. RegExp 实例方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RegExp.prototype.exec(str):()=>Array|null")]),s("br"),t._v("\n匹配，在字符串参数 str 中搜索匹配，若符合匹配返回结果数组，否则返回 null。\n当正则表达式携带修饰符 g 时，可以对一个字符串多次调用 exec 方法，搜索从上次匹配的结束索引开始。\n结果数组的结构如下：")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("结果数组属性")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("[0]")]),t._v(" "),s("td",[t._v("匹配到的字符串")])]),t._v(" "),s("tr",[s("td",[t._v("[1], ...[n ]")]),t._v(" "),s("td",[t._v("括号中的分组捕获*")])]),t._v(" "),s("tr",[s("td",[t._v("index")]),t._v(" "),s("td",[t._v("匹配的首个字符位于字符串参数 str 的索引值")])]),t._v(" "),s("tr",[s("td",[t._v("input")]),t._v(" "),s("td",[t._v("原始字符串参数 str")])]),t._v(" "),s("tr",[s("td",[t._v("groups")]),t._v(" "),s("td",[t._v("存储"),s("strong",[t._v("命名捕获组")]),t._v("信息的对象，有命名的捕获组形如 "),s("code",[t._v("(?<name>\\d)")]),t._v("，返回 "),s("code",[t._v("{name:value}")]),t._v("，其中 "),s("code",[t._v("value")]),t._v(" 表示匹配到的数值。")])])])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RegExp.prototype.test(str):()=>Boolean")]),s("br"),t._v("\n验证，判断字符串参数 str 是否符合正则表达式的匹配。返回 true 或 false。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d{1,3}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配 1~3 个数字")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bri "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'19990724'")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['199', index: 0, input: '19990724', groups: undefined]")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['907', index: 3, input: '19990724', groups: undefined]")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ture")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// groups 属性的作用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w)(\\w)(\\w)(\\w)(\\w)(?<six>\\w)(\\w)(\\w)(\\w)(\\w)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefghijklnm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefghij'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefghijklnm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("groups")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("six")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h4",{attrs:{id:"_1-3-2-string-实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-string-实例方法"}},[t._v("#")]),t._v(" 1.3.2. String 实例方法")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("String.prototype.search(reg):()=>Boolean|-1")]),s("br"),t._v("\n查找，返回正则参数 reg 在字符串中首次匹配项的"),s("strong",[t._v("索引")]),t._v("；若无则返回 -1。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String.prototype.match(reg):()=>Array|null")]),s("br"),t._v("\n匹配，根据正则参数 reg 返回匹配结果，若符合匹配返回"),s("strong",[t._v("结果数组")]),t._v("，否则返回 null。\n结果数组和 exec 返回结构一样。\n当正则表达式携带修饰符 g 时，返回所有匹配组成的数组，而不是拥有 input 的结果数组。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String.prototype.split(reg,limit):()=>Array")]),s("br"),t._v("\n分割，正则参数 reg 用于匹配应发生拆分的点，根据这些点将字符串分割为字符串"),s("strong",[t._v("数组")]),t._v("并返回，参数 limit 表示数组最大长度。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String.prototype.replace(reg,str|fun):()=>String")]),s("br"),t._v("\n替换，正则表达式 reg 所匹配到的部分，会替换为参数二。\n参数二可选值为字符串和函数，若为字符串则直接替换。\n若为函数时，函数返回值作为替换字符串，函数参数如下：")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("变量名")]),t._v(" "),s("th",[t._v("代表的值")]),t._v(" "),s("th",[t._v("match/exec 映射")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("match")]),t._v(" "),s("td",[t._v("匹配的子串")]),t._v(" "),s("td",[t._v("与结果数组中的 [0] 属性相同")])]),t._v(" "),s("tr",[s("td",[t._v("p1,p2, ...")]),t._v(" "),s("td",[t._v("pn 表示第 n 个捕获组")]),t._v(" "),s("td",[t._v("与结果数组中的 [1]...[n] 属性相同")])]),t._v(" "),s("tr",[s("td",[t._v("offset")]),t._v(" "),s("td",[t._v("匹配到的子字符串在原字符串中的偏移量。例如原字符串为 "),s("code",[t._v('"abcd"')]),t._v("，匹配到的子字符串是 "),s("code",[t._v('"bcd"')]),t._v("，那么 offset 值为 1")]),t._v(" "),s("td",[t._v("与 match/exec 返回结果数组中的 index 属性相同")])]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("被匹配的原字符串")]),t._v(" "),s("td",[t._v("与结果数组中的 input 属性相同")])]),t._v(" "),s("tr",[s("td",[t._v("NamedCaptureGroup")]),t._v(" "),s("td",[t._v("命名捕获组匹配的对象")]),t._v(" "),s("td",[t._v("与结果数组中的 groups 属性相同")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1999-07-24'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['-', '-']")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['1999', '07', '24']")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1999/07/24'")]),t._v("\n")])])]),s("h4",{attrs:{id:"_1-3-3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-总结"}},[t._v("#")]),t._v(" 1.3.3. 总结")]),t._v(" "),s("p",[t._v("当想要知道在一个字符串中的一个匹配是否被找到，可以使用 test 或 search 方法；")]),t._v(" "),s("p",[t._v("想得到更详细的匹配信息则使用 exec 或 match 方法。")]),t._v(" "),s("p",[t._v("优先选择 exec，因为在全局模式下，match 返回的结果不包含具体信息。")]),t._v(" "),s("h2",{attrs:{id:"_2-神奇的小括号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-神奇的小括号"}},[t._v("#")]),t._v(" 2. 神奇的小括号")]),t._v(" "),s("p",[t._v("在匹配中，小括号最初是用于"),s("strong",[t._v("分组")]),t._v("和"),s("strong",[t._v("分支")]),t._v("的，常用于给符号一个范围。")]),t._v(" "),s("p",[t._v("正则中的符号都比较极端，范围概念是很薄弱的，例如 "),s("code",[t._v("+、*、?")]),t._v(" 只对符号前一个字符起作用，"),s("code",[t._v("|")]),t._v(" 又将整个式子分成左右两部分。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("分组\n"),s("code",[t._v("/(abc)+/")]),t._v(" 和 "),s("code",[t._v("/abc+/")]),t._v(" 对比，前者表示 "),s("code",[t._v("abc")]),t._v(" 出现一次或多次，后者表示字符串 "),s("code",[t._v("ab")]),t._v(" 后 "),s("code",[t._v("c")]),t._v(" 出现一次或多次。若为 "),s("code",[t._v("/a+b+c+/")]),t._v("，更加不同。")])]),t._v(" "),s("li",[s("p",[t._v("分支\n"),s("code",[t._v("/a(b|c)/")]),t._v(" 和 "),s("code",[t._v("/ab|c/")]),t._v(" 对比，前者表示匹配 "),s("code",[t._v("ab")]),t._v(" 或 "),s("code",[t._v("ac")]),t._v("，后者表示匹配 "),s("code",[t._v("ab")]),t._v(" 或 "),s("code",[t._v("c")]),t._v("。")])])]),t._v(" "),s("p",[t._v("这就是小括号的分组和分支作用，但如果小括号和正则符号不搭噶，小括号还有啥用呢？例如 "),s("code",[t._v("/a(bc)/")]),t._v(" 和 "),s("code",[t._v("/abc/")]),t._v("。")]),t._v(" "),s("p",[t._v("括号更重要的作用，是提供了捕获组，便于我们引用它。")]),t._v(" "),s("p",[t._v("引用某个捕获组，会有两种情形：在 JavaScript 里引用它，在正则表达式里引用它。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-javascript-中获取捕获组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-javascript-中获取捕获组"}},[t._v("#")]),t._v(" 2.1. JavaScript 中获取捕获组")]),t._v(" "),s("h4",{attrs:{id:"结果数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果数组"}},[t._v("#")]),t._v(" 结果数组")]),t._v(" "),s("p",[t._v("调用 exec 和 match ，返回的结果数组中，索引值 1~n 所在的数组项，按顺序保存了捕获组的信息。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bri "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'19990724'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})(\\d{2})(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['19990724', '1999', '07', '24', index: 0, input: '19990724', groups: undefined]")]),t._v("\nbri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['19990724', '1999', '07', '24', index: 0, input: '19990724', groups: undefined]")]),t._v("\n")])])]),s("h4",{attrs:{id:"regexp-1-regexp-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-1-regexp-9"}},[t._v("#")]),t._v(" RegExp.$1 ~ RegExp.$9")]),t._v(" "),s("p",[t._v("只要进行和正则匹配有关的操作，即调用 RegExp 和 String 实例中正则表达式相关方法（exec、test、match、replace、split、search），")]),t._v(" "),s("p",[t._v("正则构造函数都会在 $1 至 $9 属性中保存此次捕获组的信息，若捕获组超过了 9 个，无法使用 RegExp.$n 获取。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 个捕获组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789101112"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 能够获取 10 个捕获组")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能获取 1-9 个捕获组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['12345678910', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', index: 0, input: '123456789101112', groups: undefined]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '9' undefined")]),t._v("\n")])])]),s("h4",{attrs:{id:"string-prototype-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[t._v("#")]),t._v(" String.prototype.replace")]),t._v(" "),s("p",[t._v("在字符串的 replace 方法中，可以在第二个参数中获取捕获组。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("$n")]),t._v(" 获取正则表达式的捕获组，n 没有限制，即 "),s("code",[t._v("$11")]),t._v(" 表示正则的第 11 个捕获组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789101112"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$11'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1112'")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-2-正则表达式中获取捕获组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-正则表达式中获取捕获组"}},[t._v("#")]),t._v(" 2.2. 正则表达式中获取捕获组")]),t._v(" "),s("p",[t._v("正则表达式可以引用自身的捕获组，但只能引用之前出现的捕获组，即反向引用。")]),t._v(" "),s("p",[t._v("正则表达式中，使用 "),s("code",[t._v("\\n")]),t._v(" 表示引用前面的第 n 个自身捕获组，n 没有限制，即 "),s("code",[t._v("\\11")]),t._v(" 表示引用表达式的第 11 个捕获组。")]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("\\n")]),t._v(" 是具化为捕获组所捕获到的字符，而不是同样规则，例如 "),s("code",[t._v("/(\\d{4})(\\d{2})\\2/")]),t._v("，"),s("code",[t._v("\\2")]),t._v(" 并不是等同于 "),s("code",[t._v("(\\d{2})")]),t._v(" ，而是等同于 "),s("code",[t._v("(\\d{2})")]),t._v(" 所匹配的字符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bri "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'19990724'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})(\\d{2})\\2")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false，因为第二个捕获组捕获到的是字符 `07`，此时正则表达式等价于 /(\\d{4})(\\d{2})07/")]),t._v("\n")])])]),s("p",[t._v("若捕获组不存在，直接将其当做匹配字符，例如 "),s("code",[t._v("\\3")]),t._v("，就匹配字符串 "),s("code",[t._v("'\\3'")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})(\\d{2})\\3")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'199907\\3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-3-其余补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-其余补充"}},[t._v("#")]),t._v(" 2.3. 其余补充")]),t._v(" "),s("h4",{attrs:{id:"_2-3-1-非捕获组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-非捕获组"}},[t._v("#")]),t._v(" 2.3.1. 非捕获组")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("?:")]),t._v(" 表示为非捕获括号，就可以只保留分组和分支的功能，形如 "),s("code",[t._v("(?:p)")]),t._v("。")]),t._v(" "),s("p",[t._v("除了特意标识的 "),s("code",[t._v("?:")]),t._v(" 外，正则断言也拥有括号，但也不作为捕获组，下文再提。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 纯分组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?:abc)+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcab'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['abc', index: 0, input: 'abcab', groups: undefined]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 纯分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(?:b|c)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcab'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['ab', index: 0, input: 'abcab', groups: undefined] ")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-3-2-括号嵌套"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-括号嵌套"}},[t._v("#")]),t._v(" 2.3.2. 括号嵌套")]),t._v(" "),s("p",[t._v("分组是以左括号为主的，第几个左括号，表示第几个捕获组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("((\\d{4})((\\d{2})(\\d{2})))")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'19990724'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['19990724', '19990724', '1999', '0724', '07', '24', index: 0, input: '19990724', groups: undefined]")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3-正则断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-正则断言"}},[t._v("#")]),t._v(" 3. 正则断言")]),t._v(" "),s("p",[t._v("断言在程序中通常指的是，到指定位置时，断言当前是否符合程序的要求。")]),t._v(" "),s("p",[t._v("故正则断言指的是，到指定位置时，判断当前位置是否符合匹配要求，也就是最开始提到的匹配位置。")]),t._v(" "),s("p",[t._v("正则表达式中，用于匹配位置的符号有 8 个：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("符号")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("^")])]),t._v(" "),s("td",[t._v("表示匹配字符串"),s("strong",[t._v("开头")]),t._v("位置")])]),t._v(" "),s("tr",[s("td",[t._v("$")]),t._v(" "),s("td",[t._v("表示匹配字符串"),s("strong",[t._v("结尾")]),t._v("位置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\b")])]),t._v(" "),s("td",[t._v("表示匹配单词边界位置，即单词字符和其他字符之间的位置，即 "),s("code",[t._v("\\w")]),t._v(" 和 "),s("code",[t._v("\\W")]),t._v(" 之间")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\B")])]),t._v(" "),s("td",[s("code",[t._v("\\b")]),t._v(" 取反，表示匹配非单词边界位置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?=p)")])]),t._v(" "),s("td",[t._v("表示 "),s("code",[t._v("p")]),t._v(" 前的位置，"),s("code",[t._v("p")]),t._v(" 可以是位置，可以是子模式")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?!p)")])]),t._v(" "),s("td",[s("code",[t._v("(?=p)")]),t._v(" 取反，表示并非是 "),s("code",[t._v("p")]),t._v(" 的前面的位置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?<=p)")])]),t._v(" "),s("td",[t._v("表示 "),s("code",[t._v("p")]),t._v(" 后的位置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?<!p)")])]),t._v(" "),s("td",[s("code",[t._v("(?<=p)")]),t._v(" 取反，表示并非是 "),s("code",[t._v("p")]),t._v(" 的后面的位置")])])])]),t._v(" "),s("p",[t._v("正则断言常常指的是后四个符号，因为 "),s("code",[t._v("p")]),t._v(" 是自定义的，所以后四个能匹配到我们想要的特殊位置。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-p-和-p"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-p-和-p"}},[t._v("#")]),t._v(" 3.1. (?=p) 和 (?!p)")]),t._v(" "),s("p",[s("code",[t._v("(?=p)")]),t._v(" 和 "),s("code",[t._v("(?!p)")]),t._v(" 称为"),s("strong",[t._v("正向先行断言")]),t._v("和"),s("strong",[t._v("负向先行断言")]),t._v("。其中正负向表示肯定或否定，先行指的是位置在 "),s("code",[t._v("p")]),t._v(" 的前面（好拗口）。")]),t._v(" "),s("p",[t._v("按我的理解是， "),s("code",[t._v("?")]),t._v(" 就是位置，"),s("code",[t._v("=")]),t._v(" 和 "),s("code",[t._v("!")]),t._v(" 表示等于或不等于，然后得到：位置后面等于/不等于 "),s("code",[t._v("p")]),t._v("。")]),t._v(" "),s("p",[t._v("反过来就变成是：是/不是 "),s("code",[t._v("p")]),t._v(" 前面的位置。")]),t._v(" "),s("p",[t._v("若在先行断言前面跟随符号，例如 "),s("code",[t._v("q(?=p)")]),t._v("，则表达为 "),s("code",[t._v("p")]),t._v(" 前面的符号是不是 "),s("code",[t._v("q")]),t._v("。")]),t._v(" "),s("p",[t._v("正则断言的一大妙用是不会影响到 "),s("code",[t._v("p")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w)*(?=\\s)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  匹配空白符前面的单词，但是不会影响到该空白符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lyffff is my name'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rain'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'rain is my name'")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-2-p-和-p"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-p-和-p"}},[t._v("#")]),t._v(" 3.2. (?<=p) 和 (?<!p)")]),t._v(" "),s("p",[s("code",[t._v("(?<=p)")]),t._v(" 和 "),s("code",[t._v("(?<!p)")]),t._v(" 中文称为"),s("strong",[t._v("正向后行断言")]),t._v("和"),s("strong",[t._v("负向后行断言")]),t._v("，正负向意义与上相同，后行指的是位置在 "),s("code",[t._v("p")]),t._v(" 的后面。")]),t._v(" "),s("p",[t._v("把 "),s("code",[t._v("(?<=p)")]),t._v(" 想象成 "),s("code",[t._v("(=p?)")]),t._v(" ，因为 "),s("code",[t._v("p?")]),t._v(" 本身就有指代出现 0 或 1 次的特殊含义，所以符号 "),s("code",[t._v("?")]),t._v(" 被箭头 "),s("code",[t._v("<")]),t._v(" 踹到了最左边。")]),t._v(" "),s("p",[t._v("解析 "),s("code",[t._v("(=p?)")]),t._v(" 和 "),s("code",[t._v("(!p?)")]),t._v("，"),s("code",[t._v("?")]),t._v(" 就是位置，"),s("code",[t._v("=")]),t._v(" 和 "),s("code",[t._v("!")]),t._v(" 表示等于或不等于，然后得到：位置前面等于/不等于 "),s("code",[t._v("p")]),t._v("。")]),t._v(" "),s("p",[t._v("反过来就是：是/不是 "),s("code",[t._v("p")]),t._v(" 后面的位置。")]),t._v(" "),s("p",[t._v("若在后行断言后面跟随符号，例如 "),s("code",[t._v("(?<=p)q")]),t._v("，则表达为 "),s("code",[t._v("p")]),t._v(" 后面的符号是不是 "),s("code",[t._v("q")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-断言的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-断言的使用场景"}},[t._v("#")]),t._v(" 3.3. 断言的使用场景")]),t._v(" "),s("p",[t._v("断言和字符串的 replace 方法组合，可以做到类似插入的效果。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lyfff"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?=f)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "ly$f$f$f"')]),t._v("\n")])])]),s("p",[t._v("正则断言对于取出特定的字符前后、特定字符包裹的字符串，特好使。")]),t._v(" "),s("p",[t._v('例如："前端仔集合：@张三 @李四 @王五"，我需要取出我所艾特的人名，即特定字符 '),s("code",[t._v("@")]),t._v(" 后的子串。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"前端仔集合：@张三 @李四 @王五"')]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("@(\\S+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['@张三', '@李四', '@王五'] 此时特殊字符也还在")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("@(\\S+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['张三', '李四', '王五']")]),t._v("\n")])])]),s("p",[t._v("换成正则断言后：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"前端仔集合：@张三 @李四 @王五"')]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=@)(\\S+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['张三', '李四', '王五']")]),t._v("\n")])])]),s("p",[t._v('例如："[1,2,3][4,5][6][7,8]"，取出所有数组字符串，即特定字符 '),s("code",[t._v("[")]),t._v("、"),s("code",[t._v("]")]),t._v("，及他们包裹的内容。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[1,2,3][4,5][6][7,8]"')]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=\\[)(.)*?(?=\\])")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['[1,2,3]','[4,5]','[6]','[7,8]']")]),t._v("\n")])])]),s("h2",{attrs:{id:"_4-匹配的本质-回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-匹配的本质-回溯"}},[t._v("#")]),t._v(" 4. 匹配的本质——回溯")]),t._v(" "),s("blockquote",[s("p",[t._v("回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、 不断“回溯”寻找解的方法，就称作“回溯法”。   ————百科百科")])]),t._v(" "),s("p",[t._v("正则表达式是按顺序匹配的，且是贪心的，即满足当前量词的上限，例如 "),s("code",[t._v("/b{1,3}c/")]),t._v("，正则希望先匹配满三个 "),s("code",[t._v("b")]),t._v("，再往下匹配 "),s("code",[t._v("c")]),t._v("。")]),t._v(" "),s("p",[t._v("一旦匹配失败，正则表达式就会进行回溯，回溯并不是回到上一步，而是回到"),s("strong",[t._v("可产生分支")]),t._v("的某一步，若沿着路径回溯没有找到可产生分支的节点，则回到表达式起点，移动字符串索引。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("/123/")]),t._v(" 匹配字符串 "),s("code",[t._v("12b123")]),t._v("，当表达式进行到 "),s("code",[t._v("3")]),t._v(" 时，匹配到 "),s("code",[t._v("b")]),t._v(" 字符，匹配失败；此时上一步 "),s("code",[t._v("2")]),t._v(" 只能匹配字符 "),s("code",[t._v("2")]),t._v("，从这出发等同于原来的路径，故跳过，上上步 "),s("code",[t._v("1")]),t._v(" 也只能匹配字符 "),s("code",[t._v("1")]),t._v("，往后走也是原来的路径，最终匹配回到起点，只能移动字符串索引。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("正则位置")]),t._v(" "),s("th",[t._v("字符串位置")]),t._v(" "),s("th",[t._v("结果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v('"12b123"')]),t._v(" "),s("td",[t._v("可能匹配，index 为 0")])]),t._v(" "),s("tr",[s("td",[t._v("12")]),t._v(" "),s("td",[t._v('"2b123"')]),t._v(" "),s("td",[t._v("可能匹配，index 为 0")])]),t._v(" "),s("tr",[s("td",[t._v("123")]),t._v(" "),s("td",[t._v('"b123"')]),t._v(" "),s("td",[t._v("不匹配，回溯")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v('"2b123"')]),t._v(" "),s("td",[t._v("不匹配，移动字符串索引")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v('"b123"')]),t._v(" "),s("td",[t._v("不匹配，移动字符串索引")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v('"123"')]),t._v(" "),s("td",[t._v("可能匹配，index 为 3")])]),t._v(" "),s("tr",[s("td",[t._v("12")]),t._v(" "),s("td",[t._v('"23"')]),t._v(" "),s("td",[t._v("可能匹配，index 为 3")])]),t._v(" "),s("tr",[s("td",[t._v("123")]),t._v(" "),s("td",[t._v('"3"')]),t._v(" "),s("td",[t._v("匹配成功，index 为 3")])])])]),t._v(" "),s("p",[s("strong",[t._v("个人理解")]),t._v("\n表达式相当于给个高度，字符串相当于一棵树，判断树够不够高。")]),t._v(" "),s("p",[t._v("第一反应是沿着树干测量，不够高即匹配失败就发送回溯，找到离树干顶端最近的分叉，因为觉得它的基础好，加上分叉的长度更高的可能性大，结果不行就再往下回溯，直到回到树木的根。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-可选限定符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-可选限定符"}},[t._v("#")]),t._v(" 4.1. 可选限定符")]),t._v(" "),s("p",[t._v("回溯法停留的位置，能够实现"),s("strong",[t._v("可选限定符")]),t._v("，否则直接跳过。")]),t._v(" "),s("p",[t._v("可选限定字符指的是在字符串不同情况下，此子表达式选择的字符会变化。")]),t._v(" "),s("p",[t._v("可选限定字符中的变化，讨论的不是字符内容，指的是字符范围变化。")]),t._v(" "),s("p",[t._v("因为需要进行回溯时，不管前面内容如何，是绝对符合匹配的。例如 "),s("code",[t._v("/\\d\\w/")]),t._v("，若匹配来到了 "),s("code",[t._v("\\w")]),t._v(" ，不管内容怎么变化，证明前一个字符绝对是数字。")]),t._v(" "),s("p",[t._v("有范围的字符有 "),s("code",[t._v("*")]),t._v("、"),s("code",[t._v("+")]),t._v("、"),s("code",[t._v("?")]),t._v("、"),s("code",[t._v("{m,n}")]),t._v("、"),s("code",[t._v("{m,}")]),t._v("，遇到这些字符时，可能会发送回溯。")]),t._v(" "),s("p",[t._v("回溯是不可见的，但是若在匹配中多次执行回溯操作，是很损耗性能的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(a+)+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaaa!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("我们明眼能看出来，字符串不是以 "),s("code",[t._v("a")]),t._v(" 字符结尾，匹配注定失败返回 null，但其真实的匹配流程如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("步骤")]),t._v(" "),s("th",[t._v("正则位置")]),t._v(" "),s("th",[t._v("字符串位置")]),t._v(" "),s("th",[t._v("结果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("^")]),t._v(" "),s("td",[t._v("'aaaaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("^a")]),t._v(" "),s("td",[t._v("'aaaaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("^(a+)")]),t._v(" "),s("td",[t._v("'!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("^(a+)")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("7")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("8")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("9")]),t._v(" "),s("td",[t._v("^(a+)")]),t._v(" "),s("td",[t._v("'aa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("10")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'aa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("11")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'aa!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("12")]),t._v(" "),s("td",[t._v("^(a+)")]),t._v(" "),s("td",[t._v("'aaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("13")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("14")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("15")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'aaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("16")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'aaa!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("17")]),t._v(" "),s("td",[t._v("^(a+)")]),t._v(" "),s("td",[t._v("'aaaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("18")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("19")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("20")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("21")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'a!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("22")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'aa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("23")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'aa!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("24")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'aaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("25")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'aaa!'")]),t._v(" "),s("td",[t._v("匹配失败")])]),t._v(" "),s("tr",[s("td",[t._v("26")]),t._v(" "),s("td",[t._v("^(a+)+")]),t._v(" "),s("td",[t._v("'aaaa!'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("27")]),t._v(" "),s("td",[t._v("^(a+)+$")]),t._v(" "),s("td",[t._v("'aaaa!'")]),t._v(" "),s("td",[t._v("匹配失败")])])])]),t._v(" "),s("p",[t._v("短短的一个正则表达式，却要一直回溯到 "),s("code",[t._v("(a+)")]),t._v("，不断减少此表达式获得的字符 "),s("code",[t._v("a")]),t._v(" 。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-惰性和贪婪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-惰性和贪婪"}},[t._v("#")]),t._v(" 4.2. 惰性和贪婪")]),t._v(" "),s("p",[t._v("能够实现可选限定字符的量词分为两类，贪婪量词和惰性量词。")]),t._v(" "),s("p",[t._v("多数量词是贪婪的，也就是尽可能多的匹配，能选多少就选多少。例如 "),s("code",[t._v("b{1,3}")]),t._v("，正则希望匹配三个 "),s("code",[t._v("b")]),t._v("，若没有，两个也行，若还是没有，一个不能再少了！")]),t._v(" "),s("p",[t._v("但是 "),s("code",[t._v("?")]),t._v(" 是个例外，它表示只匹配 0 或 1 次。")]),t._v(" "),s("p",[t._v("可以在贪婪量词后加上 "),s("code",[t._v("?")]),t._v(" 字符，变贪婪为惰性，也就是先取下限。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("*")]),t._v(" 和 "),s("code",[t._v("*?")]),t._v("，前者表示匹配 0 至无数次，后者表示先匹配 0 次。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("+")]),t._v(" 和 "),s("code",[t._v("+?")]),t._v("，前者表示匹配 1 至无数次，后者表示先匹配 1 次。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("{1,3}")]),t._v(" 和 "),s("code",[t._v("{1,3}?")]),t._v("，前者表示匹配 1 至 3 次，后者表示先匹配 1 次。")]),t._v(" "),s("p",[t._v("以 "),s("code",[t._v("+")]),t._v(" 符号为例：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456'")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['123456', index: 0, input: '123456', groups: undefined]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+?")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['1', index: 0, input: '123456', groups: undefined]")]),t._v("\n")])])]),s("p",[t._v("贪婪变惰性并不是严格的，因为始终它是可选限定字符，当匹配失败时，回溯的优先级高于惰性：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{1,3})?(\\d{1,3})$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("若按照顺序，则 "),s("code",[t._v("$1")]),t._v(" 为 "),s("code",[t._v("'1'")]),t._v("，"),s("code",[t._v("$2")]),t._v(" 为 "),s("code",[t._v("'234'")]),t._v("，但此时要求结尾位置前匹配三个数字，匹配失败，回溯至 "),s("code",[t._v("$1")]),t._v("，发现其好像最多可以获取三个字符，使其多获取一个字符，变为 "),s("code",[t._v("'12'")]),t._v("，"),s("code",[t._v("$2")]),t._v(" 为 "),s("code",[t._v("'345'")]),t._v("，符合。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("正则位置")]),t._v(" "),s("th",[t._v("字符串位置")]),t._v(" "),s("th",[t._v("结果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("(\\d{1,3})?")]),t._v(" "),s("td",[t._v("'12345'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("(\\d{1,3})?(\\d{1,3})")]),t._v(" "),s("td",[t._v("'2345'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("(\\d{1,3})?(\\d{1,3})$")]),t._v(" "),s("td",[t._v("'5'")]),t._v(" "),s("td",[t._v("匹配失败，回溯")])]),t._v(" "),s("tr",[s("td",[t._v("(\\d{1,3})?")]),t._v(" "),s("td",[t._v("'12345'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("(\\d{1,3})?(\\d{1,3})")]),t._v(" "),s("td",[t._v("'345'")]),t._v(" "),s("td",[t._v("可能匹配")])]),t._v(" "),s("tr",[s("td",[t._v("(\\d{1,3})?(\\d{1,3})$")]),t._v(" "),s("td",[t._v("''")]),t._v(" "),s("td",[t._v("匹配成功")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\(d{1,3})?(\\d{1,3})$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["1234", "1", "234", index: 0, input: "12345"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"_5-正则练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-正则练习"}},[t._v("#")]),t._v(" 5，正则练习")]),t._v(" "),s("p",[t._v('1，将数字转为科学计数法\n给定字符串 str = "1000000000"，⽤科学计数法表⽰该式，效果为：1,000,000,000\n正则：断言用作插入')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000000000"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?!^)(?=(\\d{3})+$)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("hr"),t._v(" "),s("p",[t._v('2，将字符串转为驼峰形式\n给定字符串 str = "get-element-by-id"，将其转化成驼峰形式，效果为："getElementById"。\n正则：replace 的函数替换')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get-element-by-id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("-(.)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配 '-' 及之后的⼀个字符")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("hr"),t._v(" "),s("p",[t._v('3，字符串去重\n给定字符串 str = "aaaaaabbbbbbbccccccc"，去掉其重复字符，效果为："abc"\n正则：捕获组')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaaaabbbbbbbccccccc"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w)\\1*(\\w)\\2*(\\w)\\3*")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$1$2$3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),s("p",[t._v("4，包含和排除\n判断字符串是否包含 'abc' 且不包含 '//'。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc //'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc nice'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'// abc'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nice // abc'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^((?!\\/\\/).)*abc((?!\\/\\/).)*$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])]),s("p",[t._v("5，正斜杠或反斜杠")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\\\/]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以匹配 `/` `\\\\` `\\/`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg_1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\[\\/]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配 `[/]`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg_2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\/\\\\]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以匹配 `/` `\\\\` `/\\\\`")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);