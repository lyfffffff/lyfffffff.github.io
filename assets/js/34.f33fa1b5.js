(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{297:function(t,e,r){"use strict";r.r(e);var _=r(13),v=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("[toc]")]),t._v(" "),e("h1",{attrs:{id:"reflect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[t._v("#")]),t._v(" Reflect")]),t._v(" "),e("p",[t._v("Reflect 表示反射的意思，在程序中，反射机制指的是作为一个媒介，可以获取任意对象的信息。")]),t._v(" "),e("p",[t._v("Reflect 是 ES6 推出的，在 ES6 之前， JS 中也有许多反射的方法，尤其是 Object。")]),t._v(" "),e("p",[t._v("例如 Object.getOwnPropertyNames(obj)，反射出 obj 的自身属性集。")]),t._v(" "),e("h2",{attrs:{id:"_1-为什么还要-reflect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么还要-reflect"}},[t._v("#")]),t._v(" 1，为什么还要 Reflect")]),t._v(" "),e("p",[t._v("在已有许多反射方法下，为什么还需要 reflect？原因有下：")]),t._v(" "),e("ul",[e("li",[t._v("有些内部的方法不希望被暴露，即其只希望从内部调用。")]),t._v(" "),e("li",[t._v("Reflect 返回值更合理。")]),t._v(" "),e("li",[t._v("Object 存在命令式，例如：delete/in，不符合面向对象的思想。")])]),t._v(" "),e("p",[t._v("很简单，我们想得到一个专门用于反射的对象，其更合理，更简洁，以后有新的反射方法也倾向于添加在 Reflect 中。")]),t._v(" "),e("h2",{attrs:{id:"_2-reflect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-reflect"}},[t._v("#")]),t._v(" 2，Reflect")]),t._v(" "),e("p",[t._v("Reflect 是一个内嵌在 window 中的对象，故不能构造使用，只能调用其中方法，效果类似于 Math 和 Globel。")]),t._v(" "),e("p",[t._v("Reflect 中的方法在 Object 上基本有所对应，但是一般简洁、优于 Object 的方法。")]),t._v(" "),e("p",[t._v("Reflect 对象拥有 13 个方法，且对第一个参数严格控制，若不传对象/函数，报错。")]),t._v(" "),e("p",[t._v("Reflect 用于反射对象，那需先补充一下对象 Object 的相关知识。")]),t._v(" "),e("h3",{attrs:{id:"_2-1-object-的知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-object-的知识"}},[t._v("#")]),t._v(" 2.1，Object 的知识")]),t._v(" "),e("p",[t._v("JS 定义对象属性的方式有两种，直接定义和 get/set 定义。")]),t._v(" "),e("p",[t._v("而 Reflect 反射这两种方法定义的属性时，会有区别。")]),t._v(" "),e("h4",{attrs:{id:"_2-1-1-js-对象中的-get-和-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-js-对象中的-get-和-set"}},[t._v("#")]),t._v(" 2.1.1，JS 对象中的 get 和 set")]),t._v(" "),e("p",[t._v("get/set 是一个函数，函数名作为对象的属性名。")]),t._v(" "),e("p",[t._v("其中 get 负责获取属性值，函数返回值为属性值，一般函数需有 return 返回语句。")]),t._v(" "),e("p",[t._v("set 负责设置属性值，函数内部一般不需要返回。")]),t._v(" "),e("p",[t._v("get/set 皆可以通过 this 获取对象中的其他属性。")]),t._v(" "),e("p",[t._v("直接定义属性和 get/set 定义属性可以同名，但是 get/set 会对其进行覆盖。")]),t._v(" "),e("p",[t._v("若只设 get/set 其一，则会产生赋值、获取失败的情况。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lyf"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Name\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_name\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"_2-1-2-属性描述器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-属性描述器"}},[t._v("#")]),t._v(" 2.1.2，属性描述器")]),t._v(" "),e("p",[t._v("JS 还有一个内部对象，用于描述对象属性的特征，被称为属性描述器（Property Descriptor）。")]),t._v(" "),e("p",[t._v("不使用 Reflect 的话，需使用 "),e("code",[t._v("Object.getOwnPropertyDescriptor(obj,attribute)")]),t._v("。")]),t._v(" "),e("p",[t._v("表示获取对象 obj 的属性 attribute 的属性描述器并返回。")]),t._v(" "),e("p",[t._v("属性描述器可能包含五个描述符：")]),t._v(" "),e("ul",[e("li",[t._v("value"),e("br"),t._v("\n属性值，默认值为 undefined。")]),t._v(" "),e("li",[t._v("writable"),e("br"),t._v("\n属性值是否可写，默认值为 true。")]),t._v(" "),e("li",[t._v("enumerable"),e("br"),t._v("\n属性是否可枚举，即是否允许使用 for/in 语句或 Object.keys() 函数遍历访问，默认为 true。")]),t._v(" "),e("li",[t._v("configurable"),e("br"),t._v("\n设置是否可设置属性特性，默认为 true。如果为false，将无法删除该属性，不能够修改属性值，也不能修改属性的属性描述符。")]),t._v(" "),e("li",[t._v("get"),e("br"),t._v("\n取值函数，默认为 undefined。")]),t._v(" "),e("li",[t._v("set"),e("br"),t._v("\n存值函数，默认为 undefined。")])]),t._v(" "),e("p",[t._v("不使用 Reflect 的话，修改属性描述器通过 "),e("code",[t._v("Object.defineProperty(obj,attribute,descriptor)")])]),t._v(" "),e("h3",{attrs:{id:"_2-2-reflect-方法简析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-reflect-方法简析"}},[t._v("#")]),t._v(" 2.2，Reflect 方法简析")]),t._v(" "),e("h4",{attrs:{id:"_2-2-1-relect-get-obj-attribute-receiver-any"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-relect-get-obj-attribute-receiver-any"}},[t._v("#")]),t._v(" 2.2.1，Relect.get(obj, attribute, receiver?):any")]),t._v(" "),e("p",[t._v("获取 obj 的 attribute 属性值。")]),t._v(" "),e("p",[t._v("receiver 可选，表示该属性为 get/set 赋值时，this 的指向。")]),t._v(" "),e("p",[t._v("和 Object[attribute] 操作符效果相同")]),t._v(" "),e("h4",{attrs:{id:"_2-2-2-relect-set-obj-attribute-value-receiver-boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-relect-set-obj-attribute-value-receiver-boolean"}},[t._v("#")]),t._v(" 2.2.2，Relect.set(obj, attribute, value, receiver?):Boolean")]),t._v(" "),e("p",[t._v("设置 obj 的 attribute 属性值为 value。")]),t._v(" "),e("p",[t._v("receiver 可选，表示该属性为 get/set 赋值时，this 的指向。")]),t._v(" "),e("p",[t._v("返回一个 Boolean 值，设置成功则返回 true，否则返回 false。")]),t._v(" "),e("p",[t._v("和 Object[attribute] = value 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-3-relect-has-obj-attribute-boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-relect-has-obj-attribute-boolean"}},[t._v("#")]),t._v(" 2.2.3，Relect.has(obj, attribute):Boolean")]),t._v(" "),e("p",[t._v("判断 obj 是否包含 attribute 属性。")]),t._v(" "),e("p",[t._v("返回一个 Boolean 值。")]),t._v(" "),e("p",[t._v("和 Object 的 in 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-4-relect-deleteproperty-obj-attribute-boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-relect-deleteproperty-obj-attribute-boolean"}},[t._v("#")]),t._v(" 2.2.4，Relect.deleteProperty(obj, attribute):Boolean")]),t._v(" "),e("p",[t._v("删除 obj 的属性 attribute。")]),t._v(" "),e("p",[t._v("返回一个 Boolean 值。")]),t._v(" "),e("p",[t._v("和 Object 的 delete 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-5-relect-construct-fun-args-constructorfun-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-relect-construct-fun-args-constructorfun-obj"}},[t._v("#")]),t._v(" 2.2.5，Relect.construct(fun, args, constructorFun?):obj")]),t._v(" "),e("p",[t._v("等同于 new 实例化，返回值为构造函数 fun 的实例对象。")]),t._v(" "),e("p",[t._v("args 为一个类数组，表示 new 构造函数实例时的参数列表。")]),t._v(" "),e("p",[t._v("constructorFun 可选，表示构造实例的原型属性的 constructor 指向，即 "),e("code",[t._v("obj.__proto__.constructor == constructorFun")]),t._v("。")]),t._v(" "),e("p",[t._v("若 fun 不是构造函数，则抛出错误。")]),t._v(" "),e("p",[t._v("若 args 不是类数组，则抛出错误。")]),t._v(" "),e("p",[t._v("reflect.construct(Fun，['lyf']) 和 new Fun(...['lyf']) 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-6-relect-apply-fun-receiver-args-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-relect-apply-fun-receiver-args-obj"}},[t._v("#")]),t._v(" 2.2.6，Relect.apply(fun, receiver, args):obj")]),t._v(" "),e("p",[t._v("与 Function.prototype.call() 类似。")]),t._v(" "),e("p",[t._v("fun 表示需构造的函数、receiver 表示绑定的 this、args 表示传入函数的实参，传入一个数组。")]),t._v(" "),e("p",[t._v("若 fun 不是构造函数，则抛出错误。")]),t._v(" "),e("p",[t._v("返回值为构造函数 fun 的实例对象。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-7-relect-getprototypeof-obj-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-7-relect-getprototypeof-obj-obj"}},[t._v("#")]),t._v(" 2.2.7，Relect.getPrototypeOf(obj):obj")]),t._v(" "),e("p",[t._v("获取对象 obj 的原型对象，给定对象 obj 的原型属性对象。")]),t._v(" "),e("p",[t._v("和 Object.getPrototypeOf() 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-8-relect-setprototypeof-obj-newproto-boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-8-relect-setprototypeof-obj-newproto-boolean"}},[t._v("#")]),t._v(" 2.2.8，Relect.setPrototypeof(obj, newProto):Boolean")]),t._v(" "),e("p",[t._v("设置对象 obj 的原型对象。")]),t._v(" "),e("p",[t._v("返回一个 Boolean， 如果更新成功，则返回true。")]),t._v(" "),e("p",[t._v("和 Object.setPrototypeof() 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-9-relect-defineproperty-obj-attribute-descriptor-boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-9-relect-defineproperty-obj-attribute-descriptor-boolean"}},[t._v("#")]),t._v(" 2.2.9，Relect.defineProperty(obj, attribute, descriptor):Boolean")]),t._v(" "),e("p",[t._v("设置对象 obj 的 attribute 属性的 descriptor 描述。")]),t._v(" "),e("p",[t._v("返回一个 Boolean， 如果更新成功，则返回true。")]),t._v(" "),e("p",[t._v("和 Object.defineProperty() 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-10-relect-getownpropertydescriptor-obj-propertykey-obj-undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-10-relect-getownpropertydescriptor-obj-propertykey-obj-undefined"}},[t._v("#")]),t._v(" 2.2.10，Relect.getOwnPropertyDescriptor(obj, propertyKey):obj|undefined")]),t._v(" "),e("p",[t._v("如果对象 obj 中存在该属性，则返回对应的属性描述符，否则返回 undefined。")]),t._v(" "),e("p",[t._v("和 Object.getOwnPropertyDescriptor() 操作符效果相同。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-11-relect-isextensible-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-11-relect-isextensible-obj"}},[t._v("#")]),t._v(" 2.2.11，Relect.isExtensible(obj)")]),t._v(" "),e("p",[t._v("检查对象 obj 是否可扩展。")]),t._v(" "),e("p",[t._v("是否可扩展表示是否能在 obj 上添加新属性。")]),t._v(" "),e("p",[t._v("类似于 Object.isExtensible()。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-12-relect-preventextensions-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-12-relect-preventextensions-obj"}},[t._v("#")]),t._v(" 2.2.12，Relect.preventExtensions(obj)")]),t._v(" "),e("p",[t._v("将对象 obj 设置为不可扩展。")]),t._v(" "),e("p",[t._v("类似于 Object.preventExtensions()。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-13-relect-ownkeys-obj"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-13-relect-ownkeys-obj"}},[t._v("#")]),t._v(" 2.2.13，Relect.ownKeys(obj)")]),t._v(" "),e("p",[t._v("返回一个包含 obj 所有属性名的数组")]),t._v(" "),e("p",[t._v("类似于 Object.keys()，但不会受 enumerable 影响。")]),t._v(" "),e("h3",{attrs:{id:"_2-3-reflect-和-object-的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-reflect-和-object-的对比"}},[t._v("#")]),t._v(" 2.3，Reflect 和 Object 的对比")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Reflect")]),t._v(" "),e("th",[t._v("Object")]),t._v(" "),e("th",[t._v("功能")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Reflect.has(attribute)")]),t._v(" "),e("td",[t._v("attribute in obj")]),t._v(" "),e("td",[t._v("检查属性是否在对象中，使用前者")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.set(obj, attribute, value, receiver)")]),t._v(" "),e("td",[t._v("obj[attribute] = value")]),t._v(" "),e("td",[t._v("设置对象属性，常用后者")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.get(obj, attribute, reciver)")]),t._v(" "),e("td",[t._v("obj[attribute]")]),t._v(" "),e("td",[t._v("获取对象属性，常用后者")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.deleteProperty(obj, attribute)")]),t._v(" "),e("td",[t._v("delete obj[attribute]")]),t._v(" "),e("td",[t._v("删除对象的属性，使用前者")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.ownKeys(obj)")]),t._v(" "),e("td",[t._v("Object.keys(obj)")]),t._v(" "),e("td",[t._v("皆返回一个属性组成的数组，前者返回所有属性，后者只返回可枚举属性")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.defineProperty(obj, attribute, descriptor)")]),t._v(" "),e("td",[t._v("Object.defineProperty(obj, attribute, descriptor)")]),t._v(" "),e("td",[t._v("全面地"),e("strong",[t._v("描述")]),t._v("属性，前者返回 Boolean 值，后者返回设置好的对象")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.getOwnPropertyDescriptor(obj, attribute)")]),t._v(" "),e("td",[t._v("Object.getOwnPropertyDescriptor(obj, attribute)")]),t._v(" "),e("td",[t._v("返回对象某属性的属性描述符对象，二者几乎一致，无该属性则返回 undefined")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.getPrototypeOf(obj)")]),t._v(" "),e("td",[t._v("Object.getPrototypeOf(obj)")]),t._v(" "),e("td",[t._v("返回原型对象，如无返回 null，二者几乎一致")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.setPrototypeOf(obj, prototype)")]),t._v(" "),e("td",[t._v("Object.setPrototypeOf(obj, prototype)")]),t._v(" "),e("td",[t._v("设置对象的原型对象，前者返回 Boolean 值，后者返回新对象")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.isExtensible(obj)")]),t._v(" "),e("td",[t._v("Object.isExtensible(obj)")]),t._v(" "),e("td",[t._v("检查对象是否可扩展，二者几乎一致")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.preventExtensions(obj)")]),t._v(" "),e("td",[t._v("Object.preventExtensions(obj)")]),t._v(" "),e("td",[t._v("将对象设置为不可扩展的，前者返回 Boolean 值，后者返回设置好的对象，且后者若参数为非对象，会将其返回")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.apply(fun, receiver, args)")]),t._v(" "),e("td",[t._v("Function.prototype.apply(receivers, args)")]),t._v(" "),e("td",[t._v("二者功能几乎一致，常使用后者")])]),t._v(" "),e("tr",[e("td",[t._v("Reflect.construct(Fun, args)")]),t._v(" "),e("td",[t._v("new Fun(args)")]),t._v(" "),e("td",[t._v("构造函数实例，常使用后者")])])])]),t._v(" "),e("h2",{attrs:{id:"_3-代理和反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-代理和反射"}},[t._v("#")]),t._v(" 3，代理和反射")]),t._v(" "),e("p",[t._v("综上我们知道，除了 delete/in ，我们很少使用 Reflect 代替 Object。")]),t._v(" "),e("p",[t._v("这是因为反射常常用于和代理联合使用。")]),t._v(" "),e("h3",{attrs:{id:"_3-1-代理-proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-代理-proxy"}},[t._v("#")]),t._v(" 3.1，代理（Proxy）")]),t._v(" "),e("p",[t._v("Proxy 也是 ES6 衍生的，通过代理可以为目标对象生成一个替身抽象，用于在影响目标对象前，代替试错。")]),t._v(" "),e("ul",[e("li",[t._v("new Proxy(targetObj, handler):obj"),e("br"),t._v("\n参数 targetObj 表示需代理的目标对象，handler 表示处理程序对象。")])]),t._v(" "),e("p",[t._v("若 handler 为空对象，表示不作任何处理，返回一个空代理，在代理对象\n上执行的所有操作都会无障碍地传播到目标对象，当然这意义不大。")]),t._v(" "),e("p",[t._v("参数都是必填的，否则报错。")]),t._v(" "),e("p",[t._v("返回一个代理对象实例，形如 "),e("code",[t._v("{ [[Handler]], [[Target]] }")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"_3-1-1-常见代理使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-常见代理使用场景"}},[t._v("#")]),t._v(" 3.1.1，常见代理使用场景")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("this"),e("br"),t._v("\n在 this 的指向有问题时，需将 this 保存在另一个变量中。")])]),t._v(" "),e("li",[e("p",[t._v("事件委托"),e("br"),t._v("\n将子节点（li）的事件代理在父节点（ul）上，以便代理一类子节点。")])]),t._v(" "),e("li",[e("p",[t._v("经纪人和明星"),e("br"),t._v("\n用户直接访问的是经纪人，某些事情由经纪人决定，某些事情由经纪人转达。")])])]),t._v(" "),e("h4",{attrs:{id:"_3-1-2-捕获器与反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-捕获器与反射"}},[t._v("#")]),t._v(" 3.1.2，捕获器与反射")]),t._v(" "),e("p",[t._v("代理的关键是让事件到达目标函数前，对其进行操作。")]),t._v(" "),e("p",[t._v("让事件停止的行为称为拦截，实现拦截的媒介称之为捕获器。")]),t._v(" "),e("p",[t._v("构建 handler 处理程序对象，就是在为代理设置零或多个捕获器。")]),t._v(" "),e("p",[t._v("而每个捕获器 API 都和反射的方法对应，即 Reflect 有 13 个方法，而捕获器也有 13 个，代理有何参数，反射也有何参数。")])])}),[],!1,null,null,null);e.default=v.exports}}]);