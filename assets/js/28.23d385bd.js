(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{290:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"十五、dom-扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十五、dom-扩展"}},[t._v("#")]),t._v(" 十五、DOM 扩展")]),t._v(" "),s("h3",{attrs:{id:"selectors-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#selectors-api"}},[t._v("#")]),t._v(" Selectors API")]),t._v(" "),s("p",[t._v("通过 CSS 进行查询，常见的方法是 querySelector() 和 querySelectorAll()。\n前者获取首个匹配，后者获取所有匹配，若没有匹配就返回 null，可以传类选择器、id 选择器、标签选择器。")]),t._v(" "),s("h3",{attrs:{id:"getelementby-和-queryselector-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getelementby-和-queryselector-的区别"}},[t._v("#")]),t._v(" getElementBy 和 querySelector 的区别")]),t._v(" "),s("p",[t._v("getElementBy 拿到的是 HTMLCollection 数组, 是进行浅拷贝，querySelector 拿到的 NodeList 数组，且是进行深拷贝，但是数组中的元素都是 dom 对象。")]),t._v(" "),s("p",[t._v("当动态的添加元素时，querySelector 仍然只能拿到 n 个，但 getElementBy 能拿到 n+1 个，但就已获取的元素中，修改元素的属性两者都能体现，因为操作的都是 dom 对象")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" g_div "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" q_div "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getElementsByClassName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再添加一个选择器为 `.div` 的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'class'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.div'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndocument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nq_div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不变")]),t._v("\ng_div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// +1")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("效率问题\n因为 querySelector 进行的是深拷贝, 故效率没有 getElementBy 好, 但是方便, 因为不论传何种选择器都可以找到相应匹配项。")])]),t._v(" "),s("li",[s("p",[t._v("div.matches(css selector)\n传入一个 css 选择器，判断该节点是否有该选择器，有返回 true，无返回 false")])])]),t._v(" "),s("h3",{attrs:{id:"元素遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元素遍历"}},[t._v("#")]),t._v(" 元素遍历")]),t._v(" "),s("p",[t._v("因为 firstChild 等方法将空白文本节点当做子节点，故 DOM 推出获取元素节点的方法")]),t._v(" "),s("ul",[s("li",[t._v("firstElementChild")]),t._v(" "),s("li",[t._v("lastElementChild")]),t._v(" "),s("li",[t._v("childElementCount")]),t._v(" "),s("li",[t._v("previousElementSibling")]),t._v(" "),s("li",[t._v("nextElementSibling")])]),t._v(" "),s("h3",{attrs:{id:"html5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html5"}},[t._v("#")]),t._v(" HTML5")]),t._v(" "),s("h4",{attrs:{id:"css-拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-拓展"}},[t._v("#")]),t._v(" CSS 拓展")]),t._v(" "),s("p",[t._v("添加了 getElementsByClassName 方法。")]),t._v(" "),s("p",[t._v("添加了 classList 属性替代 className 属性，包含 add、remove、toggle、contains 方法操作选择器。")]),t._v(" "),s("h4",{attrs:{id:"焦点管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#焦点管理"}},[t._v("#")]),t._v(" 焦点管理")]),t._v(" "),s("p",[t._v("document.activeElement 获取当前处于焦点的元素，加载好的页面默认焦点元素是 body。")]),t._v(" "),s("p",[t._v("当点击输入框、a 链接时，切换焦点元素。document.hasFocus() 返回当前文档是否是焦点，切换焦点通过点击当前文档和点击其他地方")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasFocus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作页面时")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不在页面时")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"htmldocument"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#htmldocument"}},[t._v("#")]),t._v(" HTMLDocument")]),t._v(" "),s("p",[t._v("即额外的 document 属性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("readyState 属性\n获取浏览器状态，有四个值 uninitialized 表示还未开始载入、loading 表示载入中、interactive 表示已加载文档与用户可以开始交互、complete 表示载入完成")])]),t._v(" "),s("li",[s("p",[t._v('compatMode 属性\n获取当前的文档模式（标准模式和混杂模式），标准模式下 document.compatMode 的值是"CSS1Compat"，而在混杂模式下，document.compatMode 的值是"BackCompat"：')])]),t._v(" "),s("li",[s("p",[t._v("head 属性\n之前只有 document.body，现在新增 document.head 获取 head 标签")])]),t._v(" "),s("li",[s("p",[t._v("characterSet\n字符集属性，可以修改，一般常为 "),s("code",[t._v("UTF-8")])])]),t._v(" "),s("li",[s("p",[t._v("dataset\ndataset 属性返回一个 DOMStringMap 实例，包含所有使用 data-作为前缀的属性")])]),t._v(" "),s("li",[s("p",[t._v("插入标记")]),t._v(" "),s("ul",[s("li",[t._v("innerHTML\n节点的所有子节点，包含字符串和标签和空白")]),t._v(" "),s("li",[t._v("outerHTML\n相当于 innerHTML + 自身")]),t._v(" "),s("li",[t._v("insertAdjacentHTML(where, div) 和 insertAdjacentText(where, div)\n插入元素节点或文本节点，参数 where 表示插入节点的位置，"),s("code",[t._v("beforebegin")]),t._v("表示当前节点前、"),s("code",[t._v("afterbegin")]),t._v("表示第一个子节点前，"),s("code",[t._v("beforeend")]),t._v("表示最后一个子节点前，"),s("code",[t._v("afterend")]),t._v("表示当前节点后。\ndiv 表示一个节点字符串，不能传一个 DOM 节点，因为是修改节点的 innerHTML，即字符串，会将 DOM 节点解析为字符串，形如"),s("code",[t._v("[object HTMLDivElement]")])])])]),t._v(" "),s("li",[s("p",[t._v("内存与性能\n移除节点并不会将节点相关的事件移除，造成内存泄漏，需手动移除。")])]),t._v(" "),s("li",[s("p",[t._v('scrollIntoView(config)\n滚动浏览器窗口至 调用此方法的元素 进入视口。\nconfig 为空时，默认将元素顶端与视口最顶端对齐；\nconfig 为 Boolean 值时，true 表示元素顶端与视口最顶端对齐，false 表示元素底端与视口最底端对齐。\nconfig 为一个对象时，有三个属性：behavior 定义过渡动画，可取值为"smooth"和"auto"，默认为"auto"，即直接跳转，\'smooth\'则是平缓的移动窗口；\nblock 定义垂直方向的对齐，可选值为"start"（顶对顶）、"center"（中对中）、"end"（底对底）和"nearest"（没出现就出现，故底对底，因为底对底刚出现），默认为 "start"；\ninline 定义水平方向的对齐，可取值为"start"、"center"、"end"和"nearest"，默认为 "nearest"，但是水平滚动条较少，故常常没有效果；')])])]),t._v(" "),s("h4",{attrs:{id:"专有扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#专有扩展"}},[t._v("#")]),t._v(" 专有扩展")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("children 属性\n获取节点的所有元素节点，返回 HTMLCollection 实例，")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("children 与 childNodes 差别\nchildNodes 属性返回所有的节点，包括文本节点、注释节点；children 属性只返回元素节点；\nchildNodes 返回 HTMLCollection 实例，children 返回 NodeList 实例；")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NodeList(3) [li, text, li]")]),t._v("\n$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTMLCollection(2) [li, li]")]),t._v("\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("contains(div) 属性\n传入一个节点，若调用节点的后代包含 div，返回 true，否则返回 false。")])]),t._v(" "),s("li",[s("p",[t._v("innerText 和 outerText 属性\ninnerText 返回所有文本，包括后代中所有文本，赋值时替换节点所有内容变成一个 text 节点。outerText 取值类似，但是赋值会将节点本身也覆盖。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  i am farther\n  p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" i am son\n$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'i am farther\\ni am son'")]),t._v("\n$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// div>new")]),t._v("\n$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" $0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outerText "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n$0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new // div不见了")]),t._v("\n")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);